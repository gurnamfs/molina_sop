from langchain_openai import AzureChatOpenAI
import yaml
from langchain_community.agent_toolkits import JsonToolkit, create_json_agent
from langchain_community.tools.json.tool import JsonSpec
from prompts import prefix, suffix, return_system_prompt


llm = AzureChatOpenAI(
    azure_endpoint="https://firstsenseai.openai.azure.com",
    azure_deployment="gpt-4o",
    api_version="2024-02-15-preview",
    api_key="a823ef8205364125a194795f870da84c",
    temperature=0,
    max_tokens=None,
)


def return_system(claim):
    system = (
        return_system_prompt
        + f"""`Claim`: {claim}
    """
    )

    return system


def initial_checks(claim):
    print("Initial Check Agent")

    try:
        res = llm.invoke(return_system(claim)).content
    except Exception as e:
        print(f"Error in initial_checks functionn")
        return str(e) 

    return res


def final(claim):
    """
    Create an agent to extract relevant information from Timely Filing Document.

    Args:
        claim (str): The Claim to be processed by the agent.

    Returns:
        str: The response generated by the agent based on the provided query.
    """
    print("#####Timely Filing Tool#####")

    try:
        # Attempt to open and read the JSON file
        with open("json-files/Timely Filing Requirements by State Job Aid.json") as f:
            data = yaml.load(f, Loader=yaml.FullLoader)
    except FileNotFoundError:
        return "Error: The required JSON file could not be found."
    except IOError:
        return "Error: An issue occurred while reading the JSON file."
    except yaml.YAMLError as e:
        return f"Error: There was an issue parsing the YAML file. Details: {str(e)}"

    try:
        # Initialize the JsonSpec and JsonToolkit
        json_spec = JsonSpec(dict_=data, max_value_length=4000)
        json_toolkit = JsonToolkit(spec=json_spec)
    except Exception as e:
        return f"Error: There was an issue initializing the JsonSpec or JsonToolkit. Details: {str(e)}"

    try:
        # Create the agent executor
        json_agent_executor = create_json_agent(
            handle_parsing_errors=True,
            prefix=prefix,
            suffix=suffix,
            llm=llm,
            toolkit=json_toolkit,
            verbose=True,
        )
    except Exception as e:
        return f"Error: There was an issue creating the agent executor. Details: {str(e)}"

    try:
        response = json_agent_executor.invoke(
            "Process the state mentioned for timely filing of claims: " + claim
        )
    except Exception as e:
        return f"Error: An error occurred while invoking the agent. Details: {str(e)}"

    return response
